left_join(nodes, by = c("sponsor" = "label")) %>%
rename(from = id)
edges <- edges %>%
left_join(nodes, by = c("cosponsor" = "label")) %>%
rename(to = id)
edges <- select(edges, from, to, weight)
# now nodes and edges df are prepped
bills_passed_igraph <- graph_from_data_frame(d = edges, vertices = nodes, directed = TRUE)
# compute weighted betweenness
dist_weight = 1/E(bills_passed_igraph)$weight
E(bills_passed_igraph)$betweenness <- edge_betweenness(bills_passed_igraph, weights = dist_weight)
# and median betweenness
median_betweenness = median(E(bills_passed_igraph)$betweenness)
# # static graph
# ggraph(bills_passed_igraph, layout = "with_kk") +
#   geom_edge_link(aes(alpha = betweenness, filter = betweenness > median_betweenness)) +
#   geom_node_point(aes(color = factor(party))) +
#   geom_node_text(aes(label = label), repel = TRUE)
# draft interactive
vis_data <- toVisNetworkData(bills_passed_igraph)
visNetwork(
nodes = vis_data$nodes,
edges = vis_data$edges,
main = "Senate Legislative Network: 116th Congress"
) %>%
# Can set specific layout with visIgraphLayout()
visIgraphLayout(layout = "layout_with_kk") %>%
visGroups(groupname = "Democrat", shape = "icon",
icon = list(code = "f007", color = "blue", size = 100))%>%
visGroups(groupname = "Republican", shape = "icon",
icon = list(code = "f007", color = "red", size = 100)) %>%
visGroups(groupname = "Independent", shape = "icon",
icon = list(code = "f007", color = "green", size = 100))%>%
visEdges(color = list(color = "grey", highlight = "purple"),
smooth = FALSE,
dashes = FALSE,
shadow = FALSE,
arrows = "from") %>%
addFontAwesome() %>% # required for icons
visOptions(highlightNearest = list(enabled = T, hover = T),
selectedBy = "title") %>%
visInteraction(zoomView = FALSE,
navigationButtons = TRUE) %>%
visLayout(randomSeed = 123)
# senate chord diagram using circulize() package
senate_adj_matrix <- passed_summary %>%
select(sponsor, cosponsor) %>%
filter(cosponsor!= "no sponsor")
# add partisanship to sponsors
for(i in 1:nrow(senate_adj_matrix)){
if(str_detect(senate_adj_matrix$sponsor[i], "R-")){
senate_adj_matrix$sponsor_party[i] <- "GOP Sponsor"
} else if (str_detect(senate_adj_matrix$sponsor[i], "D-")){
senate_adj_matrix$sponsor_party[i] <- "Dem Sponsor"
}
else senate_adj_matrix$sponsor_party[i] <- "Ind. Sponsor"
}
# add partisanship to cosponsors
for(i in 1:nrow(senate_adj_matrix)){
if(str_detect(senate_adj_matrix$cosponsor[i], "R-")){
senate_adj_matrix$cosponsor_party[i] <- "GOP Cosponsor"
} else if (str_detect(senate_adj_matrix$cosponsor[i], "D-")){
senate_adj_matrix$cosponsor_party[i] <- "Dem Cosponsor"
}
else senate_adj_matrix$cosponsor_party[i] <- "Ind. Cosponsor"
}
# create adjacency matrix
#senate_adj_matrix <- as_adjacency_matrix(bills_passed_igraph, attr="weight", sparse = FALSE)
senate_adj_matrix <- senate_adj_matrix %>%
select(sponsor_party,cosponsor_party) %>%
arrange(cosponsor_party) %>%
graph_from_data_frame() %>%
as_adjacency_matrix(sparse = FALSE)
circos.clear()
# set gap
circos.par(gap.after = 20, start.degree = -125)
# set colors
grid.col = c( "GOP Sponsor" = "red",  "Dem Sponsor" = "blue",  "Ind. Sponsor"= "green",
"GOP Cosponsor" = "red",  "Dem Cosponsor" = "blue",  "Ind. Cosponsor"= "green")
link.col = c( "purple", "red", "green", "blue", "purple", "green")
chordDiagram(t(senate_adj_matrix),
grid.col = grid.col,
col = link.col,
big.gap = 20,
annotationTrack = c("name","grid"),
annotationTrackHeight = c(.05,.05),
order = sort(rownames(senate_adj_matrix)),
directional = 1,
direction.type = c("diffHeight", "arrows"),
link.arr.type = "triangle",
diffHeight  = -0.05)
# senate centrality
senate_nodes <- nodes %>% select(1,2)
senate_edges <- edges %>% select(1:3)
senate_g <- graph_from_data_frame(senate_edges, directed = TRUE, vertices = senate_nodes)
senate_nodes <- senate_nodes %>%
mutate(degree = igraph::degree(senate_g),
strength = igraph::strength(senate_g),
betweenness = igraph::betweenness(senate_g),
closeness = igraph::closeness(senate_g))
# senate bills sponsored and cosponsored
senator_stats_sponsor <- passed_summary %>%
select(sponsor,title) %>%
distinct() %>%
group_by(sponsor) %>%
summarize(bills_sponsored = n())
senator_stats_cosponsor <- passed_summary %>%
select(cosponsor,title) %>%
distinct() %>%
group_by(cosponsor) %>%
summarize(bills_cosponsored = n())
senator_stats <- full_join(senator_stats_sponsor,senator_stats_cosponsor, by = c("sponsor" = "cosponsor")) %>%
filter(sponsor != "no sponsor")
# make senate table
senate_table <- senate_nodes %>%
select(2:6) %>%
rename(Senator = label) %>%
mutate(betweenness = round(betweenness,0),
closeness = round(closeness,4)) %>%
left_join(senator_stats, by = c("Senator" = "sponsor")) %>%
rename(`passed bills sponsored` = "bills_sponsored",
`passed bills cosponsored` = "bills_cosponsored") %>%
select(1,6,7,2:4) %>%
replace_na(list("passed bills sponsored" = 0,
"passed bills cosponsored" = 0))
reactable(senate_table,
defaultSorted = list("betweenness" = "desc"),
searchable = TRUE,
bordered = TRUE,
striped = TRUE,
highlight = TRUE,
compact = TRUE,
resizable = TRUE,
columns = list(Senator = colDef(width = 250),
betweenness = colDef(width = 140),
degree = colDef(width = 100),
strength = colDef(width = 100)))
###### House NETWORK #######
# prepare summary table for network analysis (https://www.jessesadler.com/post/network-analysis-with-r/)
# let's start with just bills that became law from senate
house_summary <- summary %>%
filter(status == "Signed into law") %>%
filter(str_detect(legislation_number,"H"))
# first create node list
house_sponsors <- house_summary %>%
distinct(sponsor) %>%
rename(label = sponsor)
house_cosponsors <- house_summary %>%
distinct(cosponsor) %>%
rename(label = cosponsor) %>%
filter(label!= "no sponsor")
# join together to assign unique ids and create nodes df
house_nodes <- full_join(house_sponsors, house_cosponsors, by = "label")
house_nodes <- house_nodes %>%
rowid_to_column("id")
# add partisanship to nodes
for(i in 1:nrow(house_nodes)){
if(str_detect(house_nodes$label[i], "R-")){
house_nodes$group[i] <- "Republican"
} else if (str_detect(house_nodes$label[i], "D-")){
house_nodes$group[i] <- "Democrat"
}
else house_nodes$group[i] <- "Independent"
}
# add color to nodes
for(i in 1:nrow(house_nodes)){
if(house_nodes$group[i] == "Republican"){
house_nodes$color[i] <- "red"
} else if (house_nodes$group[i] == "Democrat"){
house_nodes$color[i] <- "blue"
}
else house_nodes$color[i] <- "green"
}
# add title to nodes
for(i in 1:nrow(house_nodes)){
house_nodes$title[i] <- house_nodes$label[i]
}
# create edge list
house_edges <- house_summary %>%
filter(cosponsor!= "no sponsor") %>%
group_by(sponsor, cosponsor) %>%
summarise(weight = n()) %>%
ungroup()
# join together to finish edges df
house_edges <- house_edges %>%
left_join(house_nodes, by = c("sponsor" = "label")) %>%
rename(from = id)
house_edges <- house_edges %>%
left_join(house_nodes, by = c("cosponsor" = "label")) %>%
rename(to = id)
house_edges <- select(house_edges, from, to, weight)
# now nodes and edges df are prepped
house_bills_passed_igraph <- graph_from_data_frame(d = house_edges, vertices = house_nodes, directed = TRUE)
# compute weighted betweenness
house_dist_weight = 1/E(house_bills_passed_igraph)$weight
E(house_bills_passed_igraph)$betweenness <- edge_betweenness(house_bills_passed_igraph, weights = house_dist_weight)
# and median betweenness
house_median_betweenness = median(E(house_bills_passed_igraph)$betweenness)
# # static graph
# ggraph(bills_passed_igraph, layout = "with_kk") +
#   geom_edge_link(aes(alpha = betweenness, filter = betweenness > median_betweenness)) +
#   geom_node_point(aes(color = factor(party))) +
#   geom_node_text(aes(label = label), repel = TRUE)
# draft interactive
house_vis_data <- toVisNetworkData(house_bills_passed_igraph)
visNetwork(
nodes = house_vis_data$nodes,
edges = house_vis_data$edges,
main = "House Legislative Network: 116th Congress"
) %>%
# Can set specific layout with visIgraphLayout()
visIgraphLayout(layout = "layout_with_kk") %>%
visGroups(groupname = "Democrat", shape = "icon",
icon = list(code = "f007", color = "blue", size = 100))%>%
visGroups(groupname = "Republican", shape = "icon",
icon = list(code = "f007", color = "red", size = 100)) %>%
visGroups(groupname = "Independent", shape = "icon",
icon = list(code = "f007", color = "green", size = 100))%>%
visEdges(color = list(color = "grey", highlight = "purple"),
smooth = FALSE,
dashes = FALSE,
shadow = FALSE,
arrows = "from") %>%
addFontAwesome() %>% # required for icons
visOptions(highlightNearest = list(enabled = T, hover = T),
selectedBy = "title") %>%
visInteraction(zoomView = FALSE,
navigationButtons = TRUE) %>%
visLayout(randomSeed = 123)
# house chord diagram using circulize() package
house_adj_matrix <- house_summary %>%
select(sponsor, cosponsor) %>%
filter(cosponsor!= "no sponsor")
# add partisanship to sponsors
for(i in 1:nrow(house_adj_matrix)){
if(str_detect(house_adj_matrix$sponsor[i], "R-")){
house_adj_matrix$sponsor_party[i] <- "GOP Sponsor"
} else if (str_detect(house_adj_matrix$sponsor[i], "D-")){
house_adj_matrix$sponsor_party[i] <- "Dem Sponsor"
}
else house_adj_matrix$sponsor_party[i] <- "Ind. Sponsor"
}
# add partisanship to cosponsors
for(i in 1:nrow(house_adj_matrix)){
if(str_detect(house_adj_matrix$cosponsor[i], "R-")){
house_adj_matrix$cosponsor_party[i] <- "GOP Cosponsor"
} else if (str_detect(house_adj_matrix$cosponsor[i], "D-")){
house_adj_matrix$cosponsor_party[i] <- "Dem Cosponsor"
}
else house_adj_matrix$cosponsor_party[i] <- "Ind. Cosponsor"
}
# create adjacency matrix
house_adj_matrix <- house_adj_matrix %>%
select(sponsor_party,cosponsor_party) %>%
arrange(cosponsor_party) %>%
graph_from_data_frame() %>%
as_adjacency_matrix(sparse = FALSE)
circos.clear()
# set gap
circos.par(gap.after = 30, start.degree = 92)
# set colors
grid.col = c( "GOP Sponsor" = "red",  "Dem Sponsor" = "blue",  "Ind. Sponsor"= "green",
"GOP Cosponsor" = "red",  "Dem Cosponsor" = "blue",  "Ind. Cosponsor"= "green")
link.col = c( "blue", "purple", "green", "purple", "red", "green")
chordDiagram(t(house_adj_matrix),
grid.col = grid.col,
col = link.col,
annotationTrack = c("name","grid"),
annotationTrackHeight = c(.05,.05),
order = sort(rownames(senate_adj_matrix)),
directional = 1,
direction.type = c("diffHeight", "arrows"),
link.arr.type = "triangle",
diffHeight  = -0.05)
# house centrality
house_nodes <- house_nodes %>% select(1,2)
house_edges <- house_edges %>% select(1:3)
house_g <- graph_from_data_frame(house_edges, directed = TRUE, vertices = house_nodes)
house_nodes <- house_nodes %>%
mutate(degree = igraph::degree(house_g),
strength = igraph::strength(house_g),
betweenness = igraph::betweenness(house_g),
closeness = igraph::closeness(house_g))
# house bills sponsored and cosponsored
house_stats_sponsor <- house_summary %>%
select(sponsor,title) %>%
distinct() %>%
group_by(sponsor) %>%
summarize(bills_sponsored = n())
house_stats_cosponsor <- house_summary %>%
select(cosponsor,title) %>%
distinct() %>%
group_by(cosponsor) %>%
summarize(bills_cosponsored = n())
house_stats <- full_join(house_stats_sponsor,house_stats_cosponsor, by = c("sponsor" = "cosponsor")) %>%
filter(sponsor != "no sponsor")
# make house table
house_table <- house_nodes %>%
select(2:6) %>%
rename(Congressperson = label) %>%
mutate(betweenness = round(betweenness,0),
closeness = round(closeness,4)) %>%
left_join(house_stats, by = c("Congressperson" = "sponsor")) %>%
rename(`passed bills sponsored` = "bills_sponsored",
`passed bills cosponsored` = "bills_cosponsored") %>%
select(1,6,7,2:4) %>%
replace_na(list("passed bills sponsored" = 0,
"passed bills cosponsored" = 0))
reactable(house_table,
defaultSorted = list("betweenness" = "desc"),
searchable = TRUE,
bordered = TRUE,
striped = TRUE,
highlight = TRUE,
compact = TRUE,
resizable = TRUE,
columns = list(Congressperson = colDef(width = 250),
betweenness = colDef(width = 140),
degree = colDef(width = 100),
strength = colDef(width = 100)))
# full_senate <- summary %>%
#   filter(str_detect(legislation_number,"S"))
#
# # first create node list
# full_senate_sponsors <- full_senate %>%
#   distinct(sponsor) %>%
#   rename(label = sponsor)
#
# full_senate_cosponsors <- full_senate %>%
#   distinct(cosponsor) %>%
#   rename(label = cosponsor) %>%
#   filter(label!= "no sponsor")
#
# # join together to assign unique ids and create nodes df
# full_senate_nodes <- full_join(full_senate_sponsors, full_senate_cosponsors, by = "label")
# full_senate_nodes <- full_senate_nodes %>%
#   rowid_to_column("id")
#
# # create edge list
# full_senate_edges <- full_senate %>%
#   filter(cosponsor!= "no sponsor") %>%
#   group_by(sponsor, cosponsor) %>%
#   summarise(weight = n()) %>%
#   ungroup()
#
# # join together to finish edges df
# full_senate_edges <- full_senate_edges %>%
#   left_join(full_senate_nodes, by = c("sponsor" = "label")) %>%
#   rename(from = id)
#
# full_senate_edges <- full_senate_edges %>%
#   left_join(full_senate_nodes, by = c("cosponsor" = "label")) %>%
#   rename(to = id)
#
# full_senate_edges <- select(edges, from, to, weight)
#
# # create full senate graph
# full_senate_g <- graph_from_data_frame(full_senate_edges, directed = TRUE, vertices = full_senate_nodes)
#
# # add full senate centrality
# full_senate_nodes <- full_senate_nodes %>%
#   mutate(degree = igraph::degree(full_senate_g),
#          strength = igraph::strength(full_senate_g),
#          betweenness = igraph::betweenness(full_senate_g),
#          closeness = igraph::closeness(full_senate_g))
#
# # create senate adjacency matrix
# senate_adj <- as_adjacency_matrix(full_senate_g, attr = "weight", names = TRUE, sparse = FALSE)
#
# # create senate similarity matrix
# cor_senate <- cor(senate_adj)
# cor_senate <- cor_senate[,c(-102,-103)]
# cor_senate <- cor_senate[c(-102,-103),]
# diag(cor_senate) <- 0
#
# # visualize similarity
# # Flatten S to be a vector
# flat_cor_senate <- as.vector(cor_senate)
#
# # Plot a histogram of similarities
# hist(flat_cor_senate, xlab = "Similarity", main = "Histogram of Senate similarity")
#
# # visualize other correlations of senate centrality measurements
# # degree vs strength
# ggplot(senate_nodes, aes(x = degree, y = strength)) +
#   # Add a point geom
#   geom_point() +
#   # Add a smooth geom with linear regression method
#   geom_smooth(method = "lm", se = FALSE)
#
# # Calculate correlation
# cor_sen_degree_strength <- cor(full_senate_nodes$degree, full_senate_nodes$strength)
#
# # degree vs betweenness
# ggplot(full_senate_nodes, aes(x = degree, y = betweenness)) +
#   # Add a point geom
#   geom_point() +
#   # Add a smooth geom with linear regression method
#   geom_smooth(method = "lm", se = FALSE)
#
# # Calculate correlation
# cor_sen_degree_betweenness <- cor(full_senate_nodes$degree, full_senate_nodes$betweenness)
#
# # strength vs betweenness
# ggplot(full_senate_nodes, aes(x = strength, y = betweenness)) +
#   # Add a point geom
#   geom_point() +
#   # Add a smooth geom with linear regression method
#   geom_smooth(method = "lm", se = FALSE)
#
# # Calculate correlation
# cor_sen_strength_betweenness <- cor(full_senate_nodes$strength, full_senate_nodes$betweenness)
#
# # # Convert weighted similarity matrix to a graph
# # sim_senate <- graph_from_adjacency_matrix(cor_senate, mode = "directed", weighted = TRUE)
# #
# # # Convert sim_senate to a data.frame
# # sim_senate_df <- igraph::as_data_frame(sim_senate, what = "edges")
# #
# # # Convert sim_senate_df to a tibble
# # sim_senate_tib <- as_tibble(sim_senate_df)
# #
# # # join to senate nodes
# # senate_nodes <- senate_nodes %>% mutate(id = as.character(id))
# # sim_senate_joined <- sim_senate_tib %>%
# #   # Left join to nodes matching "from" to "id"
# #   left_join(senate_nodes, by = c("from" = "id")) %>%
# #   # Left join to nodes matching "to" to "id", setting suffixes
# #   left_join(senate_nodes, by = c("to" = "id"), suffix = c("_from", "_to")) %>%
# #   rename(similarity = weight)
# #
# # sim_senate_joined %>%
# #   filter(degree_from >= median(degree_from),
# #          degree_to >= median(degree_to)) %>%
# # arrange(desc(similarity))
# #
# # sim_senate_filtered <- sim_senate_joined %>%
# #   # Filter on similarity greater than 0.6
# #   filter(similarity > 0.8)
# #
# # # Convert to an directed graph
# # sim_senate_filtered_network <- graph_from_data_frame(sim_senate_filtered, directed = TRUE)
# #
# # V(sim_senate_filtered_network)$name <- sim_senate_filtered$label_to
# # # Plot with Kamada-Kawai layout
# # ggraph(sim_senate_filtered_network, layout = "with_kk") +
# #   # Add an edge link geom, mapping transparency to similarity
# #   geom_edge_link(aes(alpha = similarity)) +
# #   geom_node_text(aes(label = name))
# distance_sen_network <- 1 - cor_senate
#
# d <- as.dist(distance_sen_network)
#
# # run average-linkage clustering method and plot the dendrogram
# senate_dendogram <- stats::hclust(d, method = "average")
# plot(senate_dendogram)
#
# # Cut the dendrogram tree into 4 clusters
# cls <- cutree(senate_dendogram, k = 4)
#
# # add to senate nodes
# full_senate_nodes_clustered <- full_senate_nodes %>%
#   filter(id <= 101) %>%
#   mutate(cluster = cls)
#
# # create clustered graph
# clustered_senate_graph <- graph_from_data_frame(full_senate_edges, directed = TRUE, vertices = full_senate_nodes_clustered)
#
# # Update the plot
# ggraph(clustered_senate_graph, layout = "with_kk") +
#   geom_edge_link(aes(alpha = weight), show.legend=FALSE) +
#   geom_node_point(aes(color = factor(cluster))) +
#   geom_node_text(aes(label = label)) +
#   labs(color = "cluster") +
#   # Facet the nodes by cluster, with a free scale
#   facet_nodes(~ cluster, scales="free")
all_bills <- bills %>%
filter(status == "Signed into law") %>%
select(1,4,5,6,7,2) %>%
distinct() %>%
arrange(title) %>%
rename(`Legislation #` = legislation_number,
Title = title,
Sponsor = sponsor,
`Cosponsors` = number_of_cosponsors,
Committees = committees,
`Bill URL` = url )
reactable(all_bills,
searchable = TRUE,
bordered = TRUE,
striped = TRUE,
highlight = TRUE,
compact = TRUE,
resizable = TRUE,
columns = list("Legislation #" = colDef(width = 100),
Title = colDef(width = 300)))
#                                       cell = function() {
#   # Render as a link
#   url <- all_bills$`Bill URL`
#   htmltools::tags$a(href = url, target = all_bills$title)
# })))
blogdown:::preview_site()
blogdown::build_site()
blogdown::build_site()
blogdown::serve_site()
blogdown::build_site()
blogdown::serve_site()
blogdown::build_site()
blogdown::serve_site()
blogdown:::preview_site()
unlink('content/moment/bills_passed_cache', recursive = TRUE)
blogdown:::preview_site()
