state_pop <- readxl::read_xlsx("state_pop.xlsx", skip = 2) %>%
select('Geographic Area',13) %>%
rename(pop = 2,
state = 'Geographic Area') %>%
mutate(state = str_remove_all(state, '\\.'))
file.remove("state_pop.xlsx")
# daily case counts from NYT
daily_states <- read_csv(url("https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-states.csv")) %>%
group_by(state) %>%
arrange(state)
daily_states <- daily_states %>%
mutate(yesterday_date = date - 1)
daily_states <- daily_states %>%
left_join(daily_states, by = c("yesterday_date" = "date", "state" = "state")) %>%
mutate(new_cases = cases.x - cases.y,
new_deaths = deaths.x - deaths.y) %>%
select(date, state, fips.x, cases.x, deaths.x, new_cases, new_deaths) %>%
replace(is.na(.),0) %>%
rename(cases = cases.x,
deaths = deaths.x,
fips = fips.x) %>%
left_join(state_pop, by = c("state" = "state")) %>%
mutate(perc_pop_covid = round(100*cases / pop,3),
perc_pop_death = round(100*deaths / pop,3),
new_cases_prop = round(100*new_cases / pop,3),
new_deaths_prop = round(100*new_deaths / pop,3)) %>%
filter(date > '2020-03-01') %>%
filter(!state %in% c("Northern Mariana Islands","Guam","Virgin Islands"))
####
# get state region data
state_regions <- read_csv(url("https://raw.githubusercontent.com/cphalpert/census-regions/master/us%20census%20bureau%20regions%20and%20divisions.csv")) %>%
select(State,Region)
### make summary table
covid_summary <- daily_states %>%
select(state, fips, cases, deaths, perc_pop_covid, perc_pop_death, pop) %>%
summarize(total_cases = max(cases),
total_deaths = max(deaths),
perc_pop_covid = max(perc_pop_covid)/100,
perc_pop_death = max(perc_pop_death)/100,
pop = max(pop)) %>%
left_join(state_regions, by = c("state" = "State")) %>%
filter(!is.na(Region)) %>%
arrange(perc_pop_covid) %>%
mutate(state = factor(state, levels = state))
# scrape vax data from NY Times website https://www.nytimes.com/interactive/2020/us/covid-19-vaccine-doses.html
vax_html_raw <- content(GET('https://www.nytimes.com/interactive/2020/us/covid-19-vaccine-doses.html'))
# turn into manageable table
vax <- vax_html_raw %>%
html_node('table') %>%
html_table()
names(vax) <- c(1,2,3,4,5,6)
vax <- vax %>%
rename(state = 1) %>%
rename(perc_vax = 2,
doses_received = 4,
shots_given = 5) %>%
mutate(doses_received = parse_number(doses_received),
shots_given = parse_number(shots_given),
perc_vax = as.numeric(sub("%", "", perc_vax))/100) %>%
select(1,2,4,5)
# join with covid_summary table and add more summary stats
master_summary <- covid_summary %>%
left_join(vax, by = "state") %>%
mutate(perc_protection = perc_vax + perc_pop_covid) %>%
mutate(perc_herd_immunity = perc_protection/0.7) %>%
mutate(perc_vax_given = round(100*shots_given/doses_received,1))
# import shapefile and fortify for ggplot (source: https://www.marmoe.xyz/2018/09/04/shapefiles-in-r-with-ggplot2-rgdal/)
map_shp <- broom::tidy(us_reshaped)
us_reshaped$id <- row.names(us_reshaped)
map_shp <- left_join(map_shp, us_reshaped@data)
# add covid and vax info
map_data <- left_join(map_shp, master_summary, by = c("NAME" = "state"))
# compile state centroids
state_centers <- as.data.frame(rgeos::gCentroid(us_reshaped, byid=TRUE))
state_abbv <- map_data %>%
select(STUSPS) %>%
rename(abbv = STUSPS) %>%
distinct()
state_centers <- cbind(state_centers,state_abbv) %>%
filter(!abbv == "DC")
# topline values for map titles
nyt_html_raw <- content(GET("https://www.nytimes.com/interactive/2020/us/covid-19-vaccine-doses.html")) %>%
html_node('p.g-body') %>%
html_text()
# first doses
cdc_vax_total_doses<- as.numeric(unlist(regmatches(nyt_html_raw,
gregexpr("[[:digit:]]+\\.*[[:digit:]]*",nyt_html_raw))))
cdc_vax_total_first_doses <- round(cdc_vax_total_doses[1],2)
cdc_vax_total_second_doses <- round(cdc_vax_total_doses[3],2)
# total doses
cdc_vax_total_doses <- cdc_vax_total_first_doses + cdc_vax_total_second_doses
# total first doses vax
total_vax_perc <- format(round(100000000*cdc_vax_total_first_doses/sum(master_summary$pop),2), scientific = F)
# make map
ggplot(map_data, aes(x = long,
y = lat,
group = group,
fill = perc_vax)) +
geom_polygon(color = "white",
size = .2) +
geom_text(data=state_centers, aes(x, y, group = NULL, fill = NULL, label = abbv),
color = "black", size=2) +
theme_map() +
labs(x = NULL,
y = NULL,
title = paste0("~", total_vax_perc,"% of U.S. population vaccinated against Covid-19"),
subtitle = paste0("Approximately ", cdc_vax_total_first_doses," million Americans vaccinated since December 2020.\n",
"Last updated: ", format(as.Date(Sys.Date(),"%Y-%m-%d"), "%B %d, %Y")),
caption = "Data from The New York Times; the CDC; U.S. Department of Health and Human Services; and state surveys and announcements.",
fill = NULL) +
scale_fill_gradient(low = "grey", high = "light blue", labels = scales::percent) +
theme_map() +
theme(legend.position = "right",
plot.caption = element_text(face = "italic"),
plot.title = element_text(size=16, face = "bold"),
text=element_text(family="Georgia"))
ggsave(filename = "vax_map.png", device = "png", width = 7, height = 5)
# prep daily dose data by subtracting all past vax with CDC total from today
days_since_dec_14 <- as.numeric(Sys.Date() - as.Date('2020-12-14'))
daily_vax_doses <- read_csv("vax_time_series.csv")
historic_vax_total <- sum(daily_vax_doses$daily_vaccinations)
today_vax_doses <- as.numeric(round(cdc_vax_total_doses - historic_vax_total,1))
new_daily_row <- data.frame(Sys.Date(),today_vax_doses)
names(new_daily_row) <- c("date","daily_vaccinations")
daily_vax_doses <- rbind(daily_vax_doses,new_daily_row)
# get average rate accounting for 2020 reporting buildup on Jan 1 2021
average_daily_rate <- round(sum(daily_vax_doses$daily_vaccinations)/days_since_dec_14, 2)
nrow<- nrow(daily_vax_doses)
seven_day_average_rate <- round(sum(daily_vax_doses$daily_vaccinations[(nrow-6):nrow])/7,2)
# overwrite existing csv to include today's number, to be used tomorrow
# write_csv(daily_vax_doses, "vax_time_series.csv")
# remove backlog for smooth function
daily_vax_doses_no_backlog <- daily_vax_doses %>%
filter(date!='2021-01-01')
# ready now to plot
daily_vax_doses %>%
ggplot(aes(x = date, y = daily_vaccinations)) +
geom_col(fill = "#65DDEB",
alpha = .6,
size = 1) +
geom_smooth(data = daily_vax_doses_no_backlog,
aes(x = date, y = daily_vaccinations),
color = "#659AEB",
size = 1.5,
se=FALSE,
fullrange=FALSE) +
annotate(geom="text",
x= daily_vax_doses$date[4],
y = 2.35,
label= "Includes backlog from Dec. 14 - Jan. 1, 2021",
color = "black",
size = 3,
font = "Georgia") +
annotate(geom="text",
x= daily_vax_doses$date[12],
y = .93,
label= "First day w/ one million doses",
color = "black",
size = 3,
font = "Georgia") +
# annotate(geom="text",
#          x= daily_vax_doses$date[13],
#          y = 2.35,
#          label= "CDC over-reported correction",
#          color = "black",
#          size = 3,
#          font = "Georgia") +
#
# geom_segment(aes(x = daily_vax_doses$date[15],
#                  y = 2.35,
#                  xend = daily_vax_doses$date[15],
#                  yend = 0)) +
theme_tufte() +
scale_x_date(date_breaks = "5 days",
date_labels = ("%B %d")) +
scale_y_continuous(n.breaks = 8) +
labs(x = NULL,
y = "First doses (in millions)",
title = paste0("~", cdc_vax_total_doses, " million total doses given in U.S."),
subtitle = paste0("Since vaccinations began, the U.S. has averaged ", average_daily_rate, " million total doses per day.\n",
"Seven day rolling average: ", seven_day_average_rate, " million total doses per day.\n",
"Last updated: ", format(as.Date(Sys.Date(),"%Y-%m-%d"), "%B %d, %Y")),
caption = "Data from CDC.gov") +
theme(plot.caption = element_text(size = 12, face = "italic"),
plot.title = element_text(size=16, face = "bold"),
plot.subtitle = element_text(size=12),
text=element_text(family="Georgia"),
axis.title.y = element_text(size = 12),
axis.text = element_text(size = 14, face = "bold"),
axis.text.x = element_text(angle = 40, vjust = 1, hjust = 1, size = 10),
panel.grid.major.y = element_line(colour = "grey", size = .5),
panel.grid.minor.y = element_line(colour = "grey90", size = 0.3))
ggsave(filename = "daily_vax.png", device = "png", width = 10, height = 6)
# compare vaccine allocated, distributed, and given across states
simple_bar <- vax %>%
filter(state == "U.S. Total*") %>%
pivot_longer(cols = c("doses_received","shots_given"), names_to = "metric") %>%
select(metric,value) %>%
mutate(perc = scales::percent(value/max(value),2))
simple_bar$metric[1] <- "Vaccines distributed to states"
simple_bar$metric[2] <- "Total doses given"
ggplot(simple_bar, aes(x= rev(metric),
y = value,
fill = factor(metric, levels = unique(metric)))) +
geom_col(position = "dodge") +
geom_label(
label=simple_bar$perc[2],
x=simple_bar$metric[1],
y=simple_bar$value[2] + simple_bar$value[2]/5,
show.legend = FALSE,
fill = "white",
size = 8
) +
geom_segment(aes(x = 1.5,
y = simple_bar$value[1],
xend = 1.9,
yend = simple_bar$value[2] + 2*simple_bar$value[2]/5),
arrow = arrow(type = "closed")) +
labs(x = NULL,
y = NULL,
caption = paste0("Data from CDC.gov. Last updated: ", format(as.Date(Sys.Date(),"%Y-%m-%d"), "%B %d, %Y")),
title = NULL,
fill = NULL) +
scale_y_continuous(labels = scales::comma) +
theme_tufte() +
theme(plot.caption = element_text(size = 12, face = "italic"),
plot.title = element_text(size=16, face = "bold"),
plot.subtitle = element_text(size=12),
text=element_text(family="Georgia"),
axis.title.y = element_text(size = 12),
axis.text = element_text(size = 14, face = "bold"),
axis.text.x = element_blank(),
axis.ticks = element_blank(),
panel.grid.major.y = element_line(colour = "grey", size = .5),
panel.grid.minor.y = element_line(colour = "grey90", size = 0.3),
legend.position = "top",
legend.text = element_text(size = 10))
ggsave(filename = "total_vax.png", device = "png", width = 7, height = 5)
# build nodes
flow_nodes <- data.frame(c(1:4),c("Operation Warp Speed", "Vaccine distributed to states", "First doses administered", "Second doses administered"))
names(flow_nodes) <- c("id","label")
# build edges
flow_edges <- data.frame(c("Operation Warp Speed", "Vaccine distributed to states", "First doses administered"),
c("Vaccine distributed to states", "First doses administered", "Second doses administered"),
c(simple_bar$value[1], cdc_vax_total_first_doses*10^6, cdc_vax_total_second_doses*10^6))
names(flow_edges) <- c("source","destination","weight")
flow_edges <- flow_edges %>%
mutate(weight = round(weight,0))
# prep for sankey
flow_edges <- flow_edges %>%
left_join(flow_nodes, by = c("source" = "label")) %>%
rename(from = id)
flow_edges <- flow_edges %>%
left_join(flow_nodes, by = c("destination" = "label")) %>%
rename(to = id)
flow_edges <- select(flow_edges, from, to, weight)
# manipulate nodes and edges for d3 specification
flow_nodes_d3 <- mutate(flow_nodes, id = id - 1)
flow_edges_d3 <- mutate(flow_edges, from = from - 1, to = to - 1)
# prepare colour scale
sankey_color <-'d3.scaleOrdinal() .range(["#3395FF","#EBE965","#AAEB65", "green"])'
sankeyNetwork(Links = flow_edges_d3, Nodes = flow_nodes_d3, Source = "from", Target = "to",
NodeID = "label", Value = "weight", fontSize = 16,
sinksRight = F,
iterations = 50,
nodeWidth = 30,
nodePadding = 30,
colourScale = sankey_color)
# compare vaccine allocated, distributed, and given across states
bar_stats <- master_summary %>%
select(state, doses_received, shots_given) %>%
rename('Doses allocated to state' = doses_received,
'Total doses given' = shots_given) %>%
mutate(state = factor(state, levels = state)) %>%
pivot_longer(!state, "metric", "value")
bar_stats <- master_summary %>%
select(state,Region, perc_vax_given) %>%
right_join(bar_stats, by = "state") %>%
arrange(value) %>%
mutate(state = factor(state, levels = unique(state))) %>%
filter(!state == "District of Columbia")
ggplotly(ggplot(bar_stats, aes(x= state,
y = value,
fill = factor(metric, levels = unique(metric)),
text = paste0("<b>", state, "</b> <br>",
"<b>% received shots given: </b> <br>",
perc_vax_given, "% <br>",
"<br>",
"<b>", metric,":</b><br>",
value))) +
geom_col(position = "dodge") +
facet_wrap(~Region, ncol = 2, scales = "free_y") +
labs(x = NULL,
y = NULL,
caption = "Data from The New York Times.",
fill = NULL,
title = NULL) +
scale_y_continuous(labels = scales::comma) +
coord_flip() +
theme_tufte() +
theme(axis.text.y = element_text(size=12),
text=element_text(family="Georgia"),
plot.caption = element_text(face = "italic"),
plot.title = element_text(size=18, face = "bold"),
legend.position = "bottom",
strip.text.x = element_text(size = 14, face = "bold"),
panel.grid.major.x = element_line(colour = "grey", size = 0.5),
axis.text.x = element_text(face = "bold", angle = 30)),
tooltip = "text") %>%
#ggplotly options
plotly::config(displayModeBar = FALSE) %>%
layout(hoverlabel = list(bgcolor = "white",
font = list(family = "Georgia")),
legend = list(x=.3,
y = 1.1,
orientation = 'h',
itemsizing='constant'))
# topline % to immunity stat
# total covid cases + total shots given / total us population / .7
us_perc_to_immunity <- round(100*(sum(master_summary$total_cases) + cdc_vax_total_doses*1000000) /
sum(master_summary$pop) /
.7,1)
# days since dec 14 / % percent to herd * 100 = total days
# herd immunity date = total days + dec 14
days_since_dec_14 <- as.numeric(Sys.Date() - as.Date('2020-12-14'))
total_days <- round(days_since_dec_14 * 70 / as.numeric(total_vax_perc),0)
vax_day <- format(as.Date('2020-12-14') + total_days, "%B %d, %Y")
# make map
ggplot(map_data, aes(x = long,
y = lat,
group = group,
fill = perc_herd_immunity)) +
geom_polygon(color = "white",
size = .2) +
geom_text(data=state_centers, aes(x, y, group = NULL, fill = NULL, label = abbv),
color = "black", size=2) +
theme_map() +
labs(x = NULL,
y = NULL,
title = paste0("~", us_perc_to_immunity, "% of the way to U.S. herd immunity threshold"),
subtitle = paste0("Estimated by combining confirmed vaccinations and infections.\nAssuming 70% herd immunity threshold and protection against re-infection.\nExpect lag in reported vaccinations, and significant undercount of U.S. infections.\nLast updated: ",
format(as.Date(Sys.Date(),"%Y-%m-%d"), "%B %d, %Y")),
caption = "Data from The New York Times and the CDC.",
fill = "% to herd immunity") +
scale_fill_gradient(low = "grey", high = "PaleGreen", labels = scales::percent) +
theme_map() +
theme(legend.position = "right",
plot.caption = element_text(face = "italic"),
plot.title = element_text(size=16, face = "bold"),
text=element_text(family="Georgia"))
ggsave(filename = "herd_map.png", device = "png", width = 7, height = 5)
# deaths to herd immunity
deaths_to_herd <- format(round(sum(master_summary$total_deaths)/(sum(master_summary$perc_pop_covid)/100) - sum(master_summary$total_deaths),0),format = "d", big.mark = ",")
ggplotly(ggplot(covid_summary, aes(x = state,
y = perc_pop_covid,
color = Region,
# for plotly display box later on
text = paste0("<b>",state, "</b> <br>",
"<b>% of pop. diagnosed: </b> <br>",
round(perc_pop_covid*100,2),"% <br>",
"<br>",
"<b>total # of cases: </b><br>",
total_cases))) +
geom_segment(aes(xend = state, yend=0)) +
geom_point(size = 3, color = "black") +
scale_y_continuous(labels= scales::percent) +
coord_flip() +
labs(x = NULL,
y = NULL,
caption = "Data from The New York Times and U.S. Census Bureau.",
title= NULL) +
facet_wrap(~Region, ncol = 1, scales = "free_y") +
theme_tufte() +
theme(axis.text.y = element_text(size=12),
text=element_text(family="Georgia"),
plot.caption = element_text(face = "italic"),
plot.title = element_text(size=16, face = "bold"),
legend.position = "none",
strip.text.x = element_text(size = 14, face = "bold"),
panel.grid.major.x = element_line(colour = "grey", size = 0.5),
axis.text.x = element_text(face = "bold")),
tooltip = "text") %>%
#ggplotly options
plotly::config(displayModeBar = FALSE) %>%
layout(hoverlabel = list(bgcolor = "white",
font = list(family = "Georgia")))
# summary stats for total cases
total_covid_cases <- format(sum(master_summary$total_cases), format = "d", big.mark = ",")
## ridge plot of daily new cases per state
daily_states %>%
mutate(cum_cases = max(cases)) %>%
arrange(desc(cum_cases)) %>%
ungroup() %>%
mutate(state = fct_reorder(state, cum_cases, max)) %>%
ggplot(aes(x = date,
y = state,
ordered = TRUE,
height = new_cases,
fill = state)) +
geom_density_ridges2(stat = "identity",
alpha = .6,
scale = 10,
size = .2) +
theme_ridges() +
labs(x = NULL,
y = NULL,
title = paste0("New daily cases of Covid-19: ", total_covid_cases, " total"),
caption = "Data from The New York Times and U.S. Census Bureau.") +
scale_fill_cyclical(values = c("red","orange","yellow")) +
theme(axis.text.y = element_text(size=12),
axis.text.x = element_text(face = "bold"),
panel.grid.major.x = element_blank(),
text=element_text(family="Georgia"),
plot.title = element_text(size=16, face = "bold", hjust = 0),
plot.margin = margin(2,6,2,1,"mm"),
plot.caption = element_text(face = "italic", size = 8))
#  coord_fixed(ratio = 20)
## ridge plot of daily new cases per state
daily_states %>%
mutate(prop_rank = sum(new_cases_prop)) %>%
arrange(desc(prop_rank)) %>%
ungroup() %>%
mutate(state = fct_reorder(state, prop_rank, max)) %>%
ggplot(aes(x = date,
y = factor(state, levels = rev(unique(state))),
ordered = TRUE,
height = new_cases_prop,
fill = state)) +
geom_density_ridges2(stat = "identity",
alpha = .6,
scale = 6,
size = .2) +
theme_ridges() +
labs(x = NULL,
y = NULL,
title = "New daily cases of Covid-19 -",
subtitle = "as proportion of each state's population",
caption = "Data from The New York Times and U.S. Census Bureau.") +
scale_fill_cyclical(values = c("purple","blue","dark blue")) +
theme(axis.text.y = element_text(size=12),
axis.text.x = element_text(face = "bold"),
panel.grid.major.x = element_blank(),
text=element_text(family="Georgia"),
plot.title = element_text(size=16, face = "bold"),
plot.margin = margin(2,6,2,1,"mm"),
plot.caption = element_text(face = "italic", size = 8))
#  coord_fixed(ratio = 20)
# library(covidcast)
#
# cc_data <- suppressMessages(
#   covidcast_signal(data_source = "fb-survey", signal = "smoothed_wearing_mask",
#                    start_day = "2020-04-06", end_day = "2020-12-18",
#                    geo_type = "state"))
#
# st_crosswalk <- tibble(state = state.name) %>%
#   bind_cols(tibble(abb = state.abb)) %>%
#   bind_rows(tibble(state = "District of Columbia", abb = "DC")) %>%
#   mutate(abb = str_to_lower(abb))
#
# cc_data <- left_join(cc_data, st_crosswalk, by = c("geo_value" = "abb")) %>%
#   group_by(state) %>%
#   summarize(mean_mask_perc = round(mean(value),0))
#
# prop_deaths <- daily_states %>%
#   summarize(cum_deaths = max(deaths),
#             pop = pop)
#
# mask <- cc_data %>%
#   left_join(prop_deaths, by = c("state" = "state")) %>%
#   distinct() %>%
#   mutate(prop_deaths = round(100*cum_deaths/pop,3))
#
# ggplot(mask,aes(x=prop_deaths, y = mean_mask_perc)) +
#   geom_point() +
#   geom_smooth(method=lm, se= FALSE)
#  scale_y_log10()
library(twitteR)
# connect to app
twitter_app_name <- "US_covid_vax"
twitter_api_key <- "STBer0BAcSL5LFnZ625Ek2nOF"
twitter_api_secret <- "u2boBBvcPFUnWbluC9YCxdCSTvq3F5szyJBkqjMW2XF1PTjYhJ"
twitter_bearer_token <- "AAAAAAAAAAAAAAAAAAAAAIUMLQEAAAAAe0G%2FxEMgbhwZ1ve99ZSq8Vs5SbY%3DAJBfaRfnIGa0MlcJZapmweod5wnEBrbgHybtyE7PDWBkNRyCFN"
setup_twitter_oauth(twitter_api_key, twitter_api_secret, "1345057778822504448-exYE3x4CTA33PabgXpQFUEyHYWwU59", "GUGstuQfV1GpPXwysI5snwJh3gon6Va6LKghAr8XNe5We")
# post a tweet from R
daily_tweet <- paste0("Daily update ", format(as.Date(Sys.Date(),"%Y-%m-%d"), "%m/%d/%Y"), ":\n",
"\n",
total_vax_perc, "% of the U.S. population has been vaccinated against Covid-19. That's ", cdc_vax_total_first_doses, " million first doses.\n",
"\n",
"The seven day rolling average is ", seven_day_average_rate, " million doses per day.\n",
"\n",
"The U.S. is ~", us_perc_to_immunity, "% of the way to herd immunity.\n",
"\n",
"Live tracker: https://bit.ly/covid_vax_tracker"
)
# tweet! and change image each day
tweet_image_func <- function(){
x <- sample(1:3)
if(x==1){
"herd_map.png"
} else if (x==2) {
"vax_map.png"
} else {
"daily_vax.png"
}
}
tweet_image <- tweet_image_func()
# updateStatus(text = daily_tweet,
#              mediaPath = tweet_image,
#              bypassCharLimit = TRUE)
blogdown:::preview_site()
daily_tweet
blogdown:::preview_site()
