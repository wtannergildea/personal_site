feb
# feb
feb <- pdf_text("~/Desktop/feb.pdf") %>%
read_lines()
feb
feb <- feb[97:261]
cleaned_feb <- feb %>%
str_squish()
cleaned_df_feb <- data.frame(lapply(cleaned_feb, type.convert), stringsAsFactors=FALSE)
write_csv(cleaned_df_feb, "~/Desktop/casey_feb.csv")
# march
march <- pdf_text("~/Desktop/march.pdf") %>%
read_lines()
march
march <- march[97:294]
cleaned_march <- march %>%
str_squish()
cleaned_df_march <- data.frame(lapply(cleaned_march, type.convert), stringsAsFactors=FALSE)
write_csv(cleaned_df_march, "~/Desktop/casey_feb.csv")
write_csv(cleaned_df_march, "~/Desktop/casey_march.csv")
# feb
feb <- pdf_text("~/Desktop/feb.pdf") %>%
read_lines()
feb
feb <- feb[97:261]
cleaned_feb <- feb %>%
str_squish()
cleaned_df_feb <- data.frame(lapply(cleaned_feb, type.convert), stringsAsFactors=FALSE)
write_csv(cleaned_df_feb, "~/Desktop/casey_feb.csv")
# april
april <- pdf_text("~/Desktop/april.pdf") %>%
read_lines()
april
march <- march[97:274]
# april
april <- pdf_text("~/Desktop/april.pdf") %>%
read_lines()
april
april <- april[97:274]
cleaned_april <- april %>%
str_squish()
cleaned_df_april <- data.frame(lapply(cleaned_april, type.convert), stringsAsFactors=FALSE)
write_csv(cleaned_df_april, "~/Desktop/casey_march.csv")
write_csv(cleaned_df_april, "~/Desktop/casey_april.csv")
# march
march <- pdf_text("~/Desktop/march.pdf") %>%
read_lines()
march
march <- march[97:294]
cleaned_march <- march %>%
str_squish()
cleaned_df_march <- data.frame(lapply(cleaned_march, type.convert), stringsAsFactors=FALSE)
write_csv(cleaned_df_march, "~/Desktop/casey_march.csv")
# may
may <- pdf_text("~/Desktop/may.pdf") %>%
read_lines()
may
may <- may[97:310]
cleaned_may <- may %>%
str_squish()
cleaned_df_may <- data.frame(lapply(cleaned_may, type.convert), stringsAsFactors=FALSE)
write_csv(cleaned_df_may, "~/Desktop/casey_may.csv")
# jun
jun <- pdf_text("~/Desktop/jun.pdf") %>%
read_lines()
jun
jun <- jun[97:295]
cleaned_jun <- jun %>%
str_squish()
cleaned_df_jun <- data.frame(lapply(cleaned_jun, type.convert), stringsAsFactors=FALSE)
write_csv(cleaned_df_jun, "~/Desktop/casey_jun.csv")
# july
july <- pdf_text("~/Desktop/july.pdf") %>%
read_lines()
july
# july
july <- pdf_text("~/Desktop/july.pdf") %>%
read_lines()
july
july <- july[100:220]
cleaned_july <- july %>%
str_squish()
cleaned_df_july <- data.frame(lapply(cleaned_july, type.convert), stringsAsFactors=FALSE)
write_csv(cleaned_df_july, "~/Desktop/casey_july.csv")
# aug
aug <- pdf_text("~/Desktop/aug.pdf") %>%
read_lines()
aug
# aug
aug <- pdf_text("~/Desktop/aug.pdf") %>%
read_lines()
aug
aug <- aug[98:287]
cleaned_aug <- aug %>%
str_squish()
cleaned_df_aug <- data.frame(lapply(cleaned_aug, type.convert), stringsAsFactors=FALSE)
write_csv(cleaned_df_aug, "~/Desktop/casey_aug.csv")
# sept
sept <- pdf_text("~/Desktop/sept.pdf") %>%
read_lines()
sept
sept <- sept[99:278]
cleaned_sept <- sept %>%
str_squish()
cleaned_df_sept <- data.frame(lapply(cleaned_sept, type.convert), stringsAsFactors=FALSE)
write_csv(cleaned_df_sept, "~/Desktop/casey_sept.csv")
# oct
oct <- pdf_text("~/Desktop/oct.pdf") %>%
read_lines()
oct
oct <- oct[98:297]
cleaned_oct <- oct %>%
str_squish()
cleaned_df_oct <- data.frame(lapply(cleaned_oct, type.convert), stringsAsFactors=FALSE)
write_csv(cleaned_df_oct, "~/Desktop/casey_oct.csv")
# nov
nov <- pdf_text("~/Desktop/nov.pdf") %>%
read_lines()
nov
nov <- nov[99:310]
cleaned_nov <- nov %>%
str_squish()
cleaned_df_nov <- data.frame(lapply(cleaned_nov, type.convert), stringsAsFactors=FALSE)
write_csv(cleaned_df_nov, "~/Desktop/casey_nov.csv")
source('~/Desktop/my_projects/death_penalty.R', echo=TRUE)
source('~/Desktop/my_projects/death_penalty/death_penalty.R', echo=TRUE)
View(data)
source('~/Desktop/my_projects/death_penalty/death_penalty.R', echo=TRUE)
source('~/Desktop/my_projects/death_penalty/death_penalty.R', echo=TRUE)
source('~/Desktop/my_projects/death_penalty/death_penalty.R', echo=TRUE)
source('~/Desktop/my_projects/death_penalty/death_penalty.R', echo=TRUE)
source('~/Desktop/my_projects/death_penalty/death_penalty.R', echo=TRUE)
source('~/Desktop/my_projects/death_penalty/death_penalty.R', echo=TRUE)
2021-1977
source('~/Desktop/my_projects/death_penalty/death_penalty.R', echo=TRUE)
source('~/Desktop/my_projects/death_penalty/death_penalty.R', echo=TRUE)
source('~/Desktop/my_projects/death_penalty/death_penalty.R', echo=TRUE)
source('~/Desktop/my_projects/death_penalty/death_penalty.R', echo=TRUE)
source('~/Desktop/my_projects/death_penalty/death_penalty.R', echo=TRUE)
View(race)
source('~/Desktop/my_projects/death_penalty/death_penalty.R', echo=TRUE)
source('~/Desktop/my_projects/death_penalty/death_penalty.R', echo=TRUE)
source('~/Desktop/my_projects/death_penalty/death_penalty.R', echo=TRUE)
source('~/Desktop/my_projects/death_penalty/death_penalty.R', echo=TRUE)
source('~/Desktop/my_projects/death_penalty/death_penalty.R', echo=TRUE)
source('~/Desktop/my_projects/death_penalty/death_penalty.R', echo=TRUE)
View(race_past_20)
source('~/Desktop/my_projects/death_penalty/death_penalty.R', echo=TRUE)
source('~/Desktop/my_projects/death_penalty/death_penalty.R', echo=TRUE)
source('~/Desktop/my_projects/death_penalty/death_penalty.R', echo=TRUE)
source('~/Desktop/my_projects/death_penalty/death_penalty.R', echo=TRUE)
?tibble
source('~/Desktop/my_projects/death_penalty/death_penalty.R', echo=TRUE)
View(census_data)
source('~/Desktop/my_projects/death_penalty/death_penalty.R', echo=TRUE)
?pivot_longer()
source('~/Desktop/my_projects/death_penalty/death_penalty.R', echo=TRUE)
source('~/Desktop/my_projects/death_penalty/death_penalty.R', echo=TRUE)
pivot_wider()
?pivot_wider()
source('~/Desktop/my_projects/death_penalty/death_penalty.R', echo=TRUE)
source('~/Desktop/my_projects/death_penalty/death_penalty.R', echo=TRUE)
source('~/Desktop/my_projects/death_penalty/death_penalty.R', echo=TRUE)
source('~/Desktop/my_projects/death_penalty/death_penalty.R', echo=TRUE)
source('~/Desktop/my_projects/death_penalty/death_penalty.R', echo=TRUE)
source('~/Desktop/my_projects/death_penalty/death_penalty.R', echo=TRUE)
sum(census_data$average_percent_race)
View(race_1977)
source('~/Desktop/my_projects/death_penalty/death_penalty.R', echo=TRUE)
View(race)
source('~/Desktop/my_projects/death_penalty/death_penalty.R', echo=TRUE)
source('~/Desktop/my_projects/death_penalty/death_penalty.R', echo=TRUE)
source('~/Desktop/my_projects/death_penalty/death_penalty.R', echo=TRUE)
source('~/Desktop/my_projects/death_penalty/death_penalty.R', echo=TRUE)
source('~/Desktop/my_projects/death_penalty/death_penalty.R', echo=TRUE)
source('~/Desktop/my_projects/death_penalty/death_penalty.R', echo=TRUE)
source('~/Desktop/my_projects/death_penalty/death_penalty.R', echo=TRUE)
source('~/Desktop/my_projects/death_penalty/death_penalty.R', echo=TRUE)
source('~/Desktop/my_projects/death_penalty/death_penalty.R', echo=TRUE)
source('~/Desktop/my_projects/death_penalty/death_penalty.R', echo=TRUE)
View(race)
source('~/Desktop/my_projects/death_penalty/death_penalty.R', echo=TRUE)
source('~/Desktop/my_projects/death_penalty/death_penalty.R', echo=TRUE)
source('~/Desktop/my_projects/death_penalty/death_penalty.R', echo=TRUE)
source('~/Desktop/my_projects/death_penalty/death_penalty.R', echo=TRUE)
source('~/Desktop/my_projects/death_penalty/death_penalty.R', echo=TRUE)
source('~/Desktop/my_projects/death_penalty/death_penalty.R', echo=TRUE)
source('~/Desktop/my_projects/death_penalty/death_penalty.R', echo=TRUE)
source('~/Desktop/my_projects/death_penalty/death_penalty.R', echo=TRUE)
source('~/Desktop/my_projects/death_penalty/death_penalty.R', echo=TRUE)
source('~/Desktop/my_projects/death_penalty/death_penalty.R', echo=TRUE)
source('~/Desktop/my_projects/death_penalty/death_penalty.R', echo=TRUE)
source('~/Desktop/my_projects/death_penalty/death_penalty.R', echo=TRUE)
source('~/Desktop/my_projects/death_penalty/death_penalty.R', echo=TRUE)
source('~/Desktop/my_projects/death_penalty/death_penalty.R', echo=TRUE)
source('~/Desktop/my_projects/death_penalty/death_penalty.R', echo=TRUE)
source('~/Desktop/my_projects/death_penalty/death_penalty.R', echo=TRUE)
source('~/Desktop/my_projects/death_penalty/death_penalty.R', echo=TRUE)
source('~/Desktop/my_projects/death_penalty/death_penalty.R', echo=TRUE)
source('~/Desktop/my_projects/death_penalty/death_penalty.R', echo=TRUE)
source('~/Desktop/my_projects/death_penalty/death_penalty.R', echo=TRUE)
source('~/Desktop/my_projects/death_penalty/death_penalty.R', echo=TRUE)
source('~/Desktop/my_projects/death_penalty/death_penalty.R', echo=TRUE)
source('~/Desktop/my_projects/death_penalty/death_penalty.R', echo=TRUE)
source('~/Desktop/my_projects/death_penalty/death_penalty.R', echo=TRUE)
source('~/Desktop/my_projects/death_penalty/death_penalty.R', echo=TRUE)
source('~/Desktop/my_projects/death_penalty/death_penalty.R', echo=TRUE)
source('~/Desktop/my_projects/death_penalty/death_penalty.R', echo=TRUE)
source('~/Desktop/my_projects/death_penalty/death_penalty.R', echo=TRUE)
source('~/Desktop/my_projects/death_penalty/death_penalty.R', echo=TRUE)
source('~/Desktop/my_projects/death_penalty/death_penalty.R', echo=TRUE)
source('~/Desktop/my_projects/death_penalty/death_penalty.R', echo=TRUE)
source('~/Desktop/my_projects/death_penalty/death_penalty.R', echo=TRUE)
source('~/Desktop/my_projects/death_penalty/death_penalty.R', echo=TRUE)
source('~/Desktop/my_projects/death_penalty/death_penalty.R', echo=TRUE)
source('~/Desktop/my_projects/death_penalty/death_penalty.R', echo=TRUE)
source('~/Desktop/my_projects/death_penalty/death_penalty.R', echo=TRUE)
source('~/Desktop/my_projects/death_penalty/death_penalty.R', echo=TRUE)
source('~/Desktop/my_projects/death_penalty/death_penalty.R', echo=TRUE)
source('~/Desktop/my_projects/death_penalty/death_penalty.R', echo=TRUE)
source('~/Desktop/my_projects/death_penalty/death_penalty.R', echo=TRUE)
source('~/Desktop/my_projects/death_penalty/death_penalty.R', echo=TRUE)
source('~/Desktop/my_projects/death_penalty/death_penalty.R', echo=TRUE)
source('~/Desktop/my_projects/death_penalty/death_penalty.R', echo=TRUE)
source('~/Desktop/my_projects/death_penalty/death_penalty.R', echo=TRUE)
source('~/Desktop/my_projects/death_penalty/death_penalty.R', echo=TRUE)
source('~/Desktop/my_projects/death_penalty/death_penalty.R', echo=TRUE)
log(1024, base = exp(4))
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
data(movielens)
nlevels(movielenss$genres)
nlevels(movielens$genres)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/Desktop/Kaggle ML competitions/Titanic/script.R', echo=TRUE)
source('~/Desktop/Kaggle ML competitions/Titanic/script.R', echo=TRUE)
source('~/Desktop/Kaggle ML competitions/Titanic/script.R', echo=TRUE)
?knn
source('~/Desktop/Kaggle ML competitions/Titanic/script.R', echo=TRUE)
source('~/Desktop/Kaggle ML competitions/Titanic/script.R', echo=TRUE)
source('~/Desktop/Kaggle ML competitions/Titanic/script.R', echo=TRUE)
source('~/Desktop/Kaggle ML competitions/Titanic/script.R', echo=TRUE)
View(train)
source('~/Desktop/Kaggle ML competitions/Titanic/script.R', echo=TRUE)
source('~/Desktop/Kaggle ML competitions/Titanic/script.R', echo=TRUE)
source('~/Desktop/Kaggle ML competitions/Titanic/script.R', echo=TRUE)
source('~/Desktop/Kaggle ML competitions/Titanic/script.R', echo=TRUE)
?use_series
source('~/Desktop/Kaggle ML competitions/Titanic/script.R', echo=TRUE)
source('~/Desktop/Kaggle ML competitions/Titanic/script.R', echo=TRUE)
source('~/Desktop/Kaggle ML competitions/Titanic/script.R', echo=TRUE)
View(training.treat)
source('~/Desktop/Kaggle ML competitions/Titanic/script.R', echo=TRUE)
View(training.treat)
source('~/Desktop/Kaggle ML competitions/Titanic/script.R', echo=TRUE)
source('~/Desktop/Kaggle ML competitions/Titanic/script.R', echo=TRUE)
source('~/Desktop/Kaggle ML competitions/Titanic/script.R', echo=TRUE)
source('~/Desktop/Kaggle ML competitions/Titanic/script.R', echo=TRUE)
View(normalize.train)
source('~/Desktop/Kaggle ML competitions/Titanic/script.R', echo=TRUE)
source('~/Desktop/Kaggle ML competitions/Titanic/script.R', echo=TRUE)
View(train)
source('~/Desktop/Kaggle ML competitions/Titanic/script.R', echo=TRUE)
View(test)
source('~/Desktop/Kaggle ML competitions/Titanic/script.R', echo=TRUE)
source('~/Desktop/Kaggle ML competitions/Titanic/script.R', echo=TRUE)
source('~/Desktop/Kaggle ML competitions/Titanic/script.R', echo=TRUE)
source('~/Desktop/Kaggle ML competitions/Titanic/script.R', echo=TRUE)
test <- read_csv("~/Desktop/Kaggle ML competitions/Titanic/test.csv")
# create treatment plan for train and test data
vars <- c("Pclass","Sex","Age","SibSp","Parch","Fare","Embarked") # let's ignore name, ticket, cabin
treat_plan <- designTreatmentsZ(train, varlist = vars, verbose = FALSE)
# get new variables from treatment plan
newvars <- treat_plan$scoreFrame %>%
select(varName, origName, code) %>%
filter(code %in% c("clean", "lev")) %>%
use_series(varName)
# use new clean variables to prepare() the training data:
training.treat <- prepare(treat_plan, dframe = train, varRestriction = newvars)
# And also prepare() the future, test data:
test.treat <- prepare(treat_plan, dframe = test, varRestriction = newvars)
#combine treated dependent variables with unique ids and dependent variable (survived)
train <- train %>%
select(Survived) %>%
bind_cols(training.treat)
test <- test %>%
select(PassengerId) %>%
bind_cols(test.treat)
# Logistic regression
log_model <- glm(Survived ~ ., data = train, family = binomial)
test$log_prob <- predict(log_model, test, type = "response")
View(test)
test$log_pred <- ifelse(test$log_prob >= 0.50, 1, 0)
source('~/Desktop/Kaggle ML competitions/Titanic/script.R', echo=TRUE)
source('~/Desktop/Kaggle ML competitions/Titanic/script.R', echo=TRUE)
source('~/Desktop/Kaggle ML competitions/Titanic/script.R', echo=TRUE)
source('~/Desktop/Kaggle ML competitions/Titanic/script.R', echo=TRUE)
# Then use null and full as bounds for stepwise model
forward_step_log_model <- step(null_model, scope = list(lower = null_model, upper = full_model), direction = "forward")
test$forward_step_prob <- predict(forward_step_log_model, test, type = "response")
source('~/Desktop/Kaggle ML competitions/Titanic/script.R', echo=TRUE)
source('~/Desktop/Kaggle ML competitions/Titanic/script.R', echo=TRUE)
source('~/Desktop/Kaggle ML competitions/Titanic/script.R', echo=TRUE)
source('~/Desktop/Kaggle ML competitions/Titanic/script.R', echo=TRUE)
source('~/Desktop/Kaggle ML competitions/Titanic/script.R', echo=TRUE)
source('~/Desktop/Kaggle ML competitions/Titanic/script.R', echo=TRUE)
source('~/Desktop/Kaggle ML competitions/Titanic/script.R', echo=TRUE)
source('~/Desktop/Kaggle ML competitions/Titanic/script.R', echo=TRUE)
source('~/Desktop/Kaggle ML competitions/Titanic/script.R', echo=TRUE)
source('~/Desktop/Kaggle ML competitions/Titanic/script.R', echo=TRUE)
source('~/Desktop/Kaggle ML competitions/Titanic/script.R', echo=TRUE)
source('~/Desktop/Kaggle ML competitions/Titanic/script.R', echo=TRUE)
source('~/Desktop/Kaggle ML competitions/Titanic/script.R', echo=TRUE)
source('~/Desktop/Kaggle ML competitions/Titanic/script.R', echo=TRUE)
source('~/Desktop/Kaggle ML competitions/Titanic/script.R', echo=TRUE)
source('~/Desktop/Kaggle ML competitions/Titanic/script.R', echo=TRUE)
source('~/Desktop/Kaggle ML competitions/Titanic/script.R', echo=TRUE)
source('~/Desktop/Kaggle ML competitions/Titanic/script.R', echo=TRUE)
source('~/Desktop/Kaggle ML competitions/Titanic/script.R', echo=TRUE)
source('~/Desktop/Kaggle ML competitions/Titanic/script.R', echo=TRUE)
source('~/Desktop/Kaggle ML competitions/Titanic/script.R', echo=TRUE)
?predict
source('~/Desktop/Kaggle ML competitions/Titanic/script.R', echo=TRUE)
source('~/Desktop/Kaggle ML competitions/Titanic/script.R', echo=TRUE)
source('~/Desktop/Kaggle ML competitions/Titanic/script.R', echo=TRUE)
source('~/Desktop/Kaggle ML competitions/Housing/script.R', echo=TRUE)
source('~/Desktop/Kaggle ML competitions/Housing/script.R', echo=TRUE)
View(train)
source('~/Desktop/Kaggle ML competitions/Housing/script.R', echo=TRUE)
source('~/Desktop/Kaggle ML competitions/Housing/script.R', echo=TRUE)
source('~/Desktop/Kaggle ML competitions/Housing/script.R', echo=TRUE)
source('~/Desktop/Kaggle ML competitions/Housing/script.R', echo=TRUE)
source('~/Desktop/Kaggle ML competitions/Housing/script.R', echo=TRUE)
source('~/Desktop/Kaggle ML competitions/Housing/script.R', echo=TRUE)
?gam
source('~/Desktop/Kaggle ML competitions/Housing/script.R', echo=TRUE)
source('~/Desktop/Kaggle ML competitions/Housing/script.R', echo=TRUE)
source('~/Desktop/Kaggle ML competitions/Housing/script.R', echo=TRUE)
source('~/Desktop/Kaggle ML competitions/Housing/script.R', echo=TRUE)
source('~/Desktop/Kaggle ML competitions/Housing/script.R', echo=TRUE)
source('~/Desktop/Kaggle ML competitions/Housing/script.R', echo=TRUE)
source('~/Desktop/Kaggle ML competitions/Housing/script.R', echo=TRUE)
source('~/Desktop/Kaggle ML competitions/Housing/script.R', echo=TRUE)
source('~/Desktop/Kaggle ML competitions/Housing/script.R', echo=TRUE)
source('~/Desktop/Kaggle ML competitions/Housing/script.R', echo=TRUE)
source('~/Desktop/Kaggle ML competitions/Housing/script.R', echo=TRUE)
source('~/Desktop/Kaggle ML competitions/Housing/script.R', echo=TRUE)
View(train.factor)
source('~/Desktop/Kaggle ML competitions/Housing/script.R', echo=TRUE)
View(train.factor)
source('~/Desktop/Kaggle ML competitions/Housing/script.R', echo=TRUE)
source('~/Desktop/Kaggle ML competitions/Housing/script.R', echo=TRUE)
# multi linear regression
lin_model <- lm(SalePrice ~ ., data = train.factor)
source('~/Desktop/Kaggle ML competitions/Housing/script.R', echo=TRUE)
View(train)
source('~/Desktop/Kaggle ML competitions/Housing/script.R', echo=TRUE)
source('~/Desktop/Kaggle ML competitions/Housing/script.R', echo=TRUE)
source('~/Desktop/Kaggle ML competitions/Housing/script.R', echo=TRUE)
source('~/Desktop/Kaggle ML competitions/Housing/script.R', echo=TRUE)
source('~/Desktop/Kaggle ML competitions/Housing/script.R', echo=TRUE)
View(vars)
source('~/Desktop/Kaggle ML competitions/Housing/script.R', echo=TRUE)
View(vars)
source('~/Desktop/Kaggle ML competitions/Housing/script.R', echo=TRUE)
source('~/Desktop/Kaggle ML competitions/Housing/script.R', echo=TRUE)
source('~/Desktop/Kaggle ML competitions/Housing/script.R', echo=TRUE)
source('~/Desktop/Kaggle ML competitions/Housing/script.R', echo=TRUE)
source('~/Desktop/Kaggle ML competitions/Housing/script.R', echo=TRUE)
View(treat_plan)
source('~/Desktop/Kaggle ML competitions/Housing/script.R', echo=TRUE)
source('~/Desktop/Kaggle ML competitions/Housing/script.R', echo=TRUE)
source('~/Desktop/Kaggle ML competitions/Housing/script.R', echo=TRUE)
View(training.treat)
View(test.treat)
library(tidyverse)
library(randomForest)
library(class)
library(naivebayes)
library(vtreat)
library(magrittr)
library(rpart)
library(ranger)
library(mgcv)
train <- read_csv("~/Desktop/Kaggle ML competitions/Housing/train.csv")
ind_vars <- train %>%
select(2:80)
outcome <- train %>% select(81)
test <- read_csv("~/Desktop/Kaggle ML competitions/Housing/test.csv")
ggplot(train, aes(x= SalePrice)) +
geom_histogram()
#treat
vars <- colnames(ind_vars)
treat_plan <- designTreatmentsZ(train, varlist = vars, verbose = FALSE)
newvars <- treat_plan$scoreFrame %>%
select(varName, origName, code) %>%
filter(code %in% c("clean", "lev")) %>%
use_series(varName)
# use new clean variables to prepare() the training data:
training.treat <- prepare(treat_plan, dframe = train, varRestriction = newvars)
# And also prepare() the future, test data:
test.treat <- prepare(treat_plan, dframe = test, varRestriction = newvars)
# combine treated dependent variables with unique ids and dependent variable (survived)
train <- train %>%
select(SalePrice) %>%
bind_cols(training.treat)
test <- test %>%
select(Id) %>%
bind_cols(test.treat)
library(tidyverse)
library(randomForest)
library(class)
library(naivebayes)
library(vtreat)
library(magrittr)
library(rpart)
library(ranger)
library(mgcv)
train <- read_csv("~/Desktop/Kaggle ML competitions/Housing/train.csv")
ind_vars <- train %>%
select(2:80)
outcome <- train %>% select(81)
test <- read_csv("~/Desktop/Kaggle ML competitions/Housing/test.csv")
ggplot(train, aes(x= SalePrice)) +
geom_histogram()
#treat
vars <- colnames(ind_vars)
treat_plan <- designTreatmentsZ(train, varlist = vars, verbose = FALSE)
newvars <- treat_plan$scoreFrame %>%
select(varName, origName, code) %>%
filter(code %in% c("clean", "lev")) %>%
use_series(varName)
# use new clean variables to prepare() the training data:
training.treat <- prepare(treat_plan, dframe = train, varRestriction = newvars)
# And also prepare() the future, test data:
test.treat <- prepare(treat_plan, dframe = test, varRestriction = newvars)
# combine treated dependent variables with unique ids and dependent variable (survived)
train <- train %>%
select(SalePrice) %>%
bind_cols(training.treat)
test <- test %>%
select(Id) %>%
bind_cols(test.treat)
source('~/Desktop/Kaggle ML competitions/Housing/script.R', echo=TRUE)
source('~/Desktop/Kaggle ML competitions/Housing/script.R', echo=TRUE)
source('~/Desktop/Kaggle ML competitions/Housing/script.R', echo=TRUE)
source('~/Desktop/Kaggle ML competitions/Housing/script.R', echo=TRUE)
quartile(train)
quantile(train)
source('~/Desktop/Kaggle ML competitions/Housing/script.R', echo=TRUE)
quantile?
?
?quantile
?quantile
source('~/Desktop/Kaggle ML competitions/Housing/script.R', echo=TRUE)
source('~/Desktop/Kaggle ML competitions/Housing/script.R', echo=TRUE)
source('~/Desktop/Kaggle ML competitions/Housing/script.R', echo=TRUE)
source('~/Desktop/Kaggle ML competitions/Housing/script.R', echo=TRUE)
source('~/Desktop/Kaggle ML competitions/Housing/script.R', echo=TRUE)
(quantile(train$SalePrice, probs = seq(0, 1, 0.25)))
source('~/Desktop/Kaggle ML competitions/Housing/script.R', echo=TRUE)
sd(train$SalePrice)
3*sd(train$SalePrice)
163000 + 3*sd(train$SalePrice)
source('~/Desktop/Kaggle ML competitions/Housing/script.R', echo=TRUE)
source('~/Desktop/Kaggle ML competitions/Housing/script.R', echo=TRUE)
source('~/Desktop/Kaggle ML competitions/Housing/script.R', echo=TRUE)
source('~/Desktop/Kaggle ML competitions/Housing/script.R', echo=TRUE)
View(test.treated)
source('~/Desktop/Kaggle ML competitions/Housing/script.R', echo=TRUE)
View(lin_prediction)
source('~/Desktop/Kaggle ML competitions/Housing/script.R', echo=TRUE)
source('~/Desktop/Kaggle ML competitions/Housing/script.R', echo=TRUE)
source('~/Desktop/Kaggle ML competitions/Housing/script.R', echo=TRUE)
(elog <- cv$evaluation_log)
source('~/Desktop/Kaggle ML competitions/Housing/script.R', echo=TRUE)
source('~/Desktop/Kaggle ML competitions/Housing/script.R', echo=TRUE)
source('~/Desktop/Kaggle ML competitions/Housing/script.R', echo=TRUE)
source('~/Desktop/Kaggle ML competitions/Housing/script.R', echo=TRUE)
source('~/Desktop/Kaggle ML competitions/Housing/script.R', echo=TRUE)
source('~/Desktop/Kaggle ML competitions/Housing/script.R', echo=TRUE)
View(train.treated)
View(test.treated)
View(train.treated)
source('~/Desktop/Kaggle ML competitions/Housing/script.R', echo=TRUE)
source('~/Desktop/Kaggle ML competitions/Housing/script.R', echo=TRUE)
source('~/Desktop/Kaggle ML competitions/Housing/script.R', echo=TRUE)
source('~/Desktop/Kaggle ML competitions/Housing/script.R', echo=TRUE)
source('~/Desktop/Kaggle ML competitions/Housing/script.R', echo=TRUE)
source('~/Desktop/Kaggle ML competitions/Housing/script.R', echo=TRUE)
source('~/Desktop/Kaggle ML competitions/Housing/script.R', echo=TRUE)
source('~/Desktop/Kaggle ML competitions/Housing/script.R', echo=TRUE)
source('~/Desktop/Kaggle ML competitions/Housing/script.R', echo=TRUE)
source('~/Desktop/Kaggle ML competitions/Housing/script.R', echo=TRUE)
source('~/Desktop/Kaggle ML competitions/Housing/script.R', echo=TRUE)
?rmse
library(modelr)
source('~/Desktop/Kaggle ML competitions/Housing/script.R', echo=TRUE)
source('~/Desktop/Kaggle ML competitions/Housing/script.R', echo=TRUE)
source('~/Desktop/Kaggle ML competitions/Housing/script.R', echo=TRUE)
source('~/Desktop/Kaggle ML competitions/Housing/script.R', echo=TRUE)
View(log_train.treated)
source('~/Desktop/Kaggle ML competitions/Housing/script.R', echo=TRUE)
source('~/Desktop/Kaggle ML competitions/Housing/script.R', echo=TRUE)
source('~/Desktop/Kaggle ML competitions/Housing/script.R', echo=TRUE)
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
