# with the data from 2016, and my final join combines all of that with the data from
# 2016. I attempted to use a join_all() function to do it at the same time,
# but I was not receiving the same output.
join_01 <- left_join(spring_2018, spring_2019, by = "course_id") %>%
filter(u_grad.2019 != 0 | u_grad.2018 != 0)
join_02 <- left_join(spring_2017, join_01, by = "course_id") %>%
filter(u_grad.2017 != 0)
# In the final join, I also apply a number of filters to exclude courses that did not have consistent enrollment over each of the four years.
final_join <- left_join(spring_2016, join_02, by = "course_id") %>%
filter(u_grad.2016 != 0 & u_grad.2017 != 0 & u_grad.2018 != 0 & u_grad.2019 != 0) %>%
filter(! is.na(u_grad.2019)) %>%
filter(! is.na(u_grad.2018)) %>%
filter(! is.na(u_grad.2017)) %>%
filter(! is.na(u_grad.2016)) %>%
select(course, course_title, course_name, course_id, u_grad.2016, u_grad.2017, u_grad.2018, u_grad.2019) %>%
# Here I create a new variable large_diff, which will determine which courses had the
# highest jump in undergraduate enrollment between the years 2016 and 2019. I'm
# specifically interested in the non-duplicated (some sections, tutorials etc appear
# multiple times) top ten.
mutate(large_diff =  (u_grad.2019 - u_grad.2016)) %>%
arrange(desc(large_diff)) %>%
distinct(course, .keep_all = TRUE) %>%
slice(1:10)
# Here I rename the appropriate columns for when I will need to graph them. There is
# likely a cleaner way to do this in the visualization code, so that I am not
# actually manipulating the data frame.
colnames(final_join)[5:8] <- c("2016", "2017", "2018", "2019")
# Here I use the gather() function to compress my columns and make them longer, so that I can take each course and plot across all four years in the subsequent section.
gathered <- final_join %>%
gather(key = "course_id", value = "count", "2016", "2017", "2018", "2019") %>%
arrange(course_title)
# Now, I need to visualize the data. I want to show the change in undergraduate
# course enrollment over time, with the size of the point corresponding to the
# count of undergrads.
ggplot(gathered, aes(x = course_id, y = course_title, size = count, color = course_name)) +
geom_point(alpha = .7,
show.legend = TRUE) +
scale_size(breaks = c(10, 50, 100, 200),
labels = expression("10 students", "50 students", "100 students", "200 students")) +
labs(title = "Spring Harvard Courses with the Largest Jumps in Enrollment",
subtitle = "Between 2016 and 2019" ,
x = "Year",
y = "Official FAS Course Title",
caption = "Source: Harvard Registrar Enrollment Data") +
guides(color = guide_legend(title="Full Course Name")) +
guides(size = guide_legend(title="Number of Undergrads")) +
theme_solarized() +
theme(legend.position = "right")
options(blogdown.generator.server = TRUE)
blogdown:::new_post_addin()
library(dplyr)
library(tidyverse)
library(ggplot2)
library(janitor)
library(readxl)
library(gt)
library(plyr)
library(gganimate)
library(ggthemes)
# First I download the current and archived enrollment data from the FAS
# registrar's office. I download directly from the url and save as .xlsx files.
# Download Spring 2019
download.file(url = "https://registrar.fas.harvard.edu/files/fas-registrar/files/class_enrollment_summary_by_term_2.28.19.xlsx",
destfile  = "~/Desktop/R.projects/personal_site/content/moment/spring_2019_data.xlsx",
mode = "wb")
# Download Spring 2018
download.file(url = "https://registrar.fas.harvard.edu/files/fas-registrar/files/class_enrollment_summary_by_term_03.06.18.xlsx",
destfile  = "~/Desktop/R.projects/personal_site/content/moment/spring_2018_data.xlsx",
mode = "wb")
# Download Spring 2017
download.file(url = "http://registrar.fas.harvard.edu/files/fas-registrar/files/class_enrollment_summary_by_term_2017_03_07_final_0.xlsx",
destfile  = "~/Desktop/R.projects/personal_site/content/moment/spring_2017_data.xlsx",
mode = "wb")
# Download Spring 2016
download.file(url = "http://registrar.fas.harvard.edu/files/fas-registrar/files/course_enrollment_statistics_0.xlsx",
destfile  = "~/Desktop/R.projects/personal_site/content/moment/spring_2016_data.xlsx",
mode = "wb")
# The following is a commented section of code if I wanted to download the fall
# enrollment data and create a similar visualization for Fall 2015 - 2018. Currently,
# I do not, so I leave it as comments.
# # Download Fall 2018
#
# download.file(url = "https://registrar.fas.harvard.edu/files/fas-registrar/files/class_enrollment_summary_by_term_10.24.18.xlsx",
#               destfile  = "~/Desktop/R.projects/Harvard-enrollment-graphic/fall_2018_data.xlsx",
#               mode = "wb")
#
# # Download Fall 2017
#
# download.file(url = "https://registrar.fas.harvard.edu/files/fas-registrar/files/class_enrollment_summary_by_term_10.20.17.xlsx",
#               destfile  = "~/Desktop/R.projects/Harvard-enrollment-graphic/fall_2017_data.xlsx",
#               mode = "wb")
#
# # Download Fall 2016
#
# download.file(url = "http://registrar.fas.harvard.edu/files/fas-registrar/files/copy_of_class_enrollment_summary_by_term_10.06.2016.xlsx",
#               destfile  = "~/Desktop/R.projects/Harvard-enrollment-graphic/fall_2016_data.xlsx",
#               mode = "wb")
#
# # Download Fall 2015
#
# download.file(url = "http://webdocs.registrar.fas.harvard.edu/reports/statistics/Fall_2015/CourseEnrollmentStatistics.xlsx",
#               destfile  = "~/Desktop/R.projects/Harvard-enrollment-graphic/fall_2015_data.xlsx",
#               mode = "wb")
# End of downloads.
# With the spring files downloaded, I clean each download and save into my global
# environment. I also rename the column in each file that corresponds to
# the levels of undergraduate course enrollment, so that I can differentiate between
# years.
spring_2019 <- read_excel("spring_2019_data.xlsx", skip = 3) %>%
clean_names() %>%
filter(! is.na(course_name))
colnames(spring_2019)[7] <- "u_grad.2019"
spring_2018 <- read_excel("spring_2018_data.xlsx", skip = 3) %>%
clean_names() %>%
filter(! is.na(course_name))
colnames(spring_2018)[7] <- "u_grad.2018"
spring_2017 <- read_excel("spring_2017_data.xlsx", skip = 3) %>%
clean_names() %>%
filter(! is.na(course_name))
colnames(spring_2017)[7] <- "u_grad.2017"
spring_2016 <- read_excel("spring_2016_data.xlsx", skip = 0) %>%
clean_names() %>%
filter(! is.na(course))
colnames(spring_2016)[7] <- "u_grad.2016"
# Again, here is similar code if I want to analyze fall data in the future.
# fall_2018 <- read_excel("fall_2018_data.xlsx", skip = 2) %>%
#   clean_names() %>%
#   filter(! is.na(course_name))
#
# fall_2017 <- read_excel("fall_2017_data.xlsx", skip = 3) %>%
#   clean_names() %>%
#   filter(! is.na(course_name))
#
# fall_2016 <- read_excel("fall_2016_data.xlsx", skip = 3) %>%
#   clean_names() %>%
#   filter(! is.na(course_name))
#
# fall_2015 <- read_excel("fall_2015_data.xlsx", skip = 0) %>%
#   clean_names() %>%
#   filter(! is.na(course))
# With the files downloaded, cleaned and saved into the environment, I can delete the
# originals.
fs::file_delete(c("spring_2019_data.xlsx",
"spring_2018_data.xlsx",
"spring_2017_data.xlsx",
"spring_2016_data.xlsx"))
# "fall_2018_data.xlsx",
# "fall_2017_data.xlsx",
# "fall_2016_data.xlsx",
# "fall_2015_data.xlsx"))
# Now, I need to merge all four files into the same data frame. I probably could have
# use the bindrows() function to speed up the process, but I wanted to practice
# using the join functions and the gather function.
# On my first join, I combine the data from 2018 and 2019. My second join combines this
# with the data from 2016, and my final join combines all of that with the data from
# 2016. I attempted to use a join_all() function to do it at the same time,
# but I was not receiving the same output.
join_01 <- left_join(spring_2018, spring_2019, by = "course_id") %>%
filter(u_grad.2019 != 0 | u_grad.2018 != 0)
join_02 <- left_join(spring_2017, join_01, by = "course_id") %>%
filter(u_grad.2017 != 0)
# In the final join, I also apply a number of filters to exclude courses that did not have consistent enrollment over each of the four years.
final_join <- left_join(spring_2016, join_02, by = "course_id") %>%
filter(u_grad.2016 != 0 & u_grad.2017 != 0 & u_grad.2018 != 0 & u_grad.2019 != 0) %>%
filter(! is.na(u_grad.2019)) %>%
filter(! is.na(u_grad.2018)) %>%
filter(! is.na(u_grad.2017)) %>%
filter(! is.na(u_grad.2016)) %>%
select(course, course_title, course_name, course_id, u_grad.2016, u_grad.2017, u_grad.2018, u_grad.2019) %>%
# Here I create a new variable large_diff, which will determine which courses had the
# highest jump in undergraduate enrollment between the years 2016 and 2019. I'm
# specifically interested in the non-duplicated (some sections, tutorials etc appear
# multiple times) top ten.
mutate(large_diff =  (u_grad.2019 - u_grad.2016)) %>%
arrange(desc(large_diff)) %>%
distinct(course, .keep_all = TRUE) %>%
slice(1:10)
# Here I rename the appropriate columns for when I will need to graph them. There is
# likely a cleaner way to do this in the visualization code, so that I am not
# actually manipulating the data frame.
colnames(final_join)[5:8] <- c("2016", "2017", "2018", "2019")
# Here I use the gather() function to compress my columns and make them longer, so that I can take each course and plot across all four years in the subsequent section.
gathered <- final_join %>%
gather(key = "course_id", value = "count", "2016", "2017", "2018", "2019") %>%
arrange(course_title)
# Now, I need to visualize the data. I want to show the change in undergraduate
# course enrollment over time, with the size of the point corresponding to the
# count of undergrads.
ggplot(gathered, aes(x = course_id, y = course_title, size = count, color = course_name)) +
geom_point(alpha = .7,
show.legend = TRUE) +
scale_size(breaks = c(10, 50, 100, 200),
labels = expression("10 students", "50 students", "100 students", "200 students")) +
labs(title = "Spring Harvard Courses with the Largest Jumps in Enrollment",
subtitle = "Between 2016 and 2019" ,
x = "Year",
y = "Official FAS Course Title",
caption = "Source: Harvard Registrar Enrollment Data") +
guides(color = guide_legend(title="Full Course Name")) +
guides(size = guide_legend(title="Number of Undergrads")) +
theme_solarized() +
theme(legend.position = "right")
blogdown:::update_meta_addin()
bookdown:::serve_book()
blogdown:::serve_site()
blogdown:::update_meta_addin()
knitr::opts_chunk$set(echo = FALSE)
knitr::opts_chunk$set(cache = TRUE)
library(tidyverse)
library(gapminder)
library(ggplot2)
library(gganimate)
gapminder %>%
mutate(continent = fct_collapse(continent,
Asia =  c("Asia", "Oceania"))) %>%
filter(continent %in% c("Americas", "Africa", "Asia")) %>%
# changes order of continents in columns
mutate(continent = fct_relevel(continent, c("Americas", "Africa", "Asia"))) %>%
ggplot(aes(x = gdpPercap, y = lifeExp, size = pop, color = country)) +
geom_point(alpha = .7, show.legend = FALSE) +
facet_wrap(~continent) +
scale_colour_manual(values = country_colors) +
# makes x-axis scale more accessible
scale_x_log10(breaks = c(1000,10000), labels = c("$1,000", "$10,000")) +
# using {} within title allows variable year to change
labs(title = "The World Gets Better Every Year: {frame_time}",
caption = "Source: gapminder package",
x = "GDP Per Capita",
y = "Life Expectancy") +
# gganimate part
transition_time(year) +
ease_aes('linear')
gapminder %>%
mutate(continent = fct_collapse(continent,
Asia =  c("Asia", "Oceania"))) %>%
filter(continent %in% c("Americas", "Africa", "Asia")) %>%
# changes order of continents in columns
mutate(continent = fct_relevel(continent, c("Americas", "Africa", "Asia"))) %>%
ggplot(aes(x = gdpPercap, y = lifeExp, size = pop, color = country)) +
geom_point(alpha = .7, show.legend = FALSE) +
facet_wrap(~continent) +
scale_colour_manual(values = country_colors) +
# makes x-axis scale more accessible
scale_x_log10(breaks = c(1000,10000), labels = c("$1,000", "$10,000")) +
# using {} within title allows variable year to change
labs(title = "The World Gets Better Every Year: ",
subtitle = "{frame_time}"
caption = "Source: Gapminder Package",
gapminder %>%
mutate(continent = fct_collapse(continent,
Asia =  c("Asia", "Oceania"))) %>%
filter(continent %in% c("Americas", "Africa", "Asia")) %>%
# changes order of continents in columns
mutate(continent = fct_relevel(continent, c("Americas", "Africa", "Asia"))) %>%
ggplot(aes(x = gdpPercap, y = lifeExp, size = pop, color = country)) +
geom_point(alpha = .7, show.legend = FALSE) +
facet_wrap(~continent) +
scale_colour_manual(values = country_colors) +
# makes x-axis scale more accessible
scale_x_log10(breaks = c(1000,10000), labels = c("$1,000", "$10,000")) +
# using {} within title allows variable year to change
labs(title = "The World Gets Better Every Year: ",
subtitle = "{frame_time}",
caption = "Source: Gapminder Package",
x = "GDP Per Capita",
y = "Life Expectancy") +
# gganimate part
transition_time(year) +
ease_aes('linear')
blogdown:::serve_site()
blogdown:::insert_image_addin()
blogdown:::insert_image_addin()
blogdown:::update_meta_addin()
blogdown:::update_meta_addin()
blogdown:::insert_image_addin()
blogdown:::insert_image_addin()
blogdown:::insert_image_addin()
blogdown:::serve_site()
blogdown:::insert_image_addin()
blogdown:::insert_image_addin()
blogdown:::insert_image_addin()
blogdown:::insert_image_addin()
blogdown:::update_meta_addin()
blogdown:::update_meta_addin()
knitr::opts_chunk$set(echo = FALSE,
warning = FALSE,
message = FALSE,
fig.width = 8,
fig.height = 5)
library(tidyverse)
library(readxl)
library(ggplot2)
library(ggthemes)
library(scales)
library(maps)
NCHS <- read.csv("NCHS.csv") %>%
select(-X113.Cause.Name)
# Projected nationwide trends of all 10 (or 5?)
trends_top_two <- NCHS %>%
select(Year, Cause.Name, Deaths) %>%
group_by(Year, Cause.Name) %>%
summarize("Deaths" = sum(Deaths)) %>%
filter(Cause.Name != "All causes") %>%
na.omit() %>%
filter(Cause.Name == "Cancer" | Cause.Name == "Heart disease")
ggplot(trends_top_two, aes(x = Year,
y = Deaths,
color = Cause.Name,
fill = Cause.Name)) +
geom_point(size = 1.5) +
geom_smooth() +
scale_y_continuous(labels = scales::comma) +
scale_fill_discrete(name = "Cause of Death") +
scale_color_discrete(name = "Cause of Death") +
labs(x = NULL, y = "Total Number of Deaths Nationwide",
title = "Top Two Leading Causes of Death in the United States, 1999-2016",
subtitle = "Heart Disease and Cancer Most Deadly",
caption = "Source: Center for Disease Control and Prevention") +
theme_tufte() +
theme(plot.title = element_text(size = rel(1.5), face ="bold"),
plot.subtitle = element_text(face = "italic"),
legend.title = element_text(size = rel(1.2), face = "bold"),
axis.title.y = element_text(size = rel(1.2)),
plot.caption = element_text(face = "italic"),
panel.grid.major.y = element_line(color = "gray"))
trends_bottom_eight <- NCHS %>%
select(Year, Cause.Name, Deaths) %>%
group_by(Year, Cause.Name) %>%
summarize("Deaths" = sum(Deaths)) %>%
filter(Cause.Name != "All causes") %>%
filter(Cause.Name != "Cancer") %>%
filter(Cause.Name != "Heart disease") %>%
na.omit()
ggplot(trends_bottom_eight, aes(x = Year,
y = Deaths,
color = Cause.Name,
fill = Cause.Name)) +
geom_point(size = 1.5) +
geom_smooth() +
scale_y_continuous(labels = scales::comma,
breaks = c(100000, 150000, 200000, 250000, 300000)) +
labs(x = NULL, y = "Total Number of Deaths Nationwide",
title = "Top Ten Killers in the United States Cont.",
subtitle = "Stroke, Chronic Lower Respiratory Disease, and Unintentional Injuries Round Out the Top Five",
caption = "Source: Center for Disease Control and Prevention") +
scale_color_brewer(palette = "Paired") +
scale_fill_brewer(palette = "Paired") +
scale_fill_discrete(name = "Cause of Death") +
scale_color_discrete(name = "Cause of Death") +
theme_tufte() +
theme(plot.title = element_text(size = rel(1.5), face ="bold"),
plot.subtitle = element_text(face = "italic"),
legend.title = element_text(size = rel(1.2), face = "bold"),
axis.title.y = element_text(size = rel(1.2)),
plot.caption = element_text(face = "italic"),
panel.grid.major.y = element_line(color = "gray"))
death_rate <- NCHS %>%
group_by(Year, Cause.Name) %>%
summarize(Age.adjusted.Death.Rate = mean(Age.adjusted.Death.Rate)) %>%
filter(Cause.Name != "All causes") %>%
filter(Cause.Name == "Cancer" | Cause.Name == "Heart disease") %>%
na.omit()
ggplot(death_rate, aes(x = Year,
y = Age.adjusted.Death.Rate,
color = Cause.Name,
fill = Cause.Name)) +
geom_point(size = 1.5) +
geom_smooth() +
scale_fill_discrete(name = "Cause of Death") +
scale_color_discrete(name = "Cause of Death") +
labs(x = NULL, y = "Mean Age-adjusted Death Rate",
title = "Cancer and Heart Disease Death Rates Trending Downwards",
subtitle = "Deaths per 100,000",
caption = "Source: Center for Disease Control and Prevention") +
theme_tufte() +
theme(plot.title = element_text(size = rel(1.5), face ="bold"),
plot.subtitle = element_text(face = "italic"),
legend.title = element_text(size = rel(1.2), face = "bold"),
axis.title.y = element_text(size = rel(1.2)),
plot.caption = element_text(face = "italic"),
panel.grid.major.y = element_line(color = "gray"),
panel.grid.minor.y = element_line(color = "gray"))
death_rate <- NCHS %>%
group_by(Year, Cause.Name) %>%
summarize(Age.adjusted.Death.Rate = mean(Age.adjusted.Death.Rate)) %>%
filter(Cause.Name != "All causes") %>%
filter(Cause.Name != "Cancer") %>%
filter(Cause.Name != "Heart disease") %>%
na.omit()
ggplot(death_rate, aes(x = Year,
y = Age.adjusted.Death.Rate,
color = Cause.Name,
fill = Cause.Name)) +
geom_point(size = 1.5) +
geom_smooth() +
scale_fill_discrete(name = "Cause of Death") +
scale_color_discrete(name = "Cause of Death") +
scale_color_brewer(palette = "Paired") +
scale_fill_brewer(palette = "Paired") +
labs(x = NULL, y = "Mean Age-adjusted Death Rate",
title = "Death Rates for Other Top Killers",
subtitle = "Trends are mixed: Strokes are down, Alzheimer's on the rise",
caption = "Source: Center for Disease Control and Prevention") +
theme_tufte() +
theme(plot.title = element_text(size = rel(1.5), face ="bold"),
plot.subtitle = element_text(face = "italic"),
legend.title = element_text(size = rel(1.2), face = "bold"),
axis.title.y = element_text(size = rel(1.2)),
plot.caption = element_text(face = "italic"),
panel.grid.major.y = element_line(color = "gray"))
# Map with shading according to number 1 killer in past 5 years
us_states <- map_data("state")
NCHS_states <- NCHS
NCHS_states$region <- tolower(NCHS_states$State)
NCHS_states_joined <- left_join(us_states, NCHS_states)
heart_disease <- NCHS_states_joined %>%
filter(Cause.Name == "Heart disease") %>%
filter(Year %in% c(2013,2014,2015,2016))
ggplot(data = heart_disease, aes(x = long,
y = lat,
group = group,
fill = Age.adjusted.Death.Rate)) +
facet_wrap(~Year, ncol = 2) +
geom_polygon(color = "grey90", size = .1) +
coord_map(projection = "albers", lat0 = 39, lat1 = 45) +   # curves map to annoy flat-earthers
labs(x = NULL, y = NULL,
title = "Heart Disease Death Rates By State",
subtitle = NULL,
caption = "Source: Center for Disease Control and Prevention",
fill = "Death rate per 100,000 persons") +
scale_fill_viridis_c(option = "inferno") +
theme_map() +
theme(plot.title = element_text(size = rel(1.5), face ="bold"),
plot.caption = element_text(face="italic"),
legend.position = "bottom",
strip.background = element_blank())
suicide <- NCHS_states_joined %>%
filter(Cause.Name == "Suicide") %>%
filter(Year %in% c(2013,2014,2015,2016))
ggplot(data = suicide, aes(x = long,
y = lat,
group = group,
fill = Age.adjusted.Death.Rate)) +
facet_wrap(~Year, ncol = 2) +
geom_polygon(color = "grey90", size = .1) +
coord_map(projection = "albers", lat0 = 39, lat1 = 45) +   # curves map to annoy flat-earthers
labs(x = NULL, y = NULL,
title = "Suicide Death Rates By State",
subtitle = NULL,
caption = "Source: Center for Disease Control and Prevention",
fill = "Death rate per 100,000 persons") +
scale_fill_viridis_c(option = "cividis") +
theme_map() +
theme(plot.title = element_text(size = rel(1.5), face ="bold"),
plot.caption = element_text(face="italic"),
legend.position = "bottom",
strip.background = element_blank())
# influenza <- NCHS_states_joined %>%
#   filter(Cause.Name == "Influenza and pneumonia") %>%
#   filter(Year %in% c(2013,2014,2015,2016))
#
# ggplot(data = influenza, aes(x = long,
#                              y = lat,
#                              group = group,
#                              fill = Age.adjusted.Death.Rate)) +
#
#   facet_wrap(~Year, ncol = 2) +
#
#   geom_polygon(color = "grey90", size = .1) +
#
#   coord_map(projection = "albers", lat0 = 39, lat1 = 45) +   # curves map to annoy flat-earthers
#
#   labs(x = NULL, y = NULL,
#        title = "Influenza and Pneumonia Death Rates By State",
#        subtitle = NULL,
#        caption = "Source: Center for Disease Control and Prevention",
#        fill = "Death rate per 100,000 persons") +
#
#   scale_fill_viridis_c(option = "viridis") +
#
#   theme_map() +
#
#   theme(plot.title = element_text(size = rel(1.5), face ="bold"),
#         plot.caption = element_text(face="italic"),
#         legend.position = "bottom",
#         strip.background = element_blank())
unintentional <- NCHS_states_joined %>%
filter(Cause.Name == "Unintentional injuries") %>%
filter(Year %in% c(2013, 2014,2015,2016))
ggplot(data = unintentional, aes(x = long,
y = lat,
group = group,
fill = Age.adjusted.Death.Rate)) +
facet_wrap(~Year, ncol = 2) +
geom_polygon(color = "grey90", size = .1) +
coord_map(projection = "albers", lat0 = 39, lat1 = 45) +   # curves map to annoy flat-earthers
labs(x = NULL, y = NULL,
title = "Unintentional Death Rates By State",
subtitle = NULL,
caption = "Source: Center for Disease Control and Prevention",
fill = "Death rate per 100,000 persons") +
scale_fill_viridis_c(option = "plasma") +
theme_map() +
theme(plot.title = element_text(size = rel(1.5), face ="bold"),
plot.caption = element_text(face="italic"),
legend.position = "bottom",
strip.background = element_blank())
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
